{"version":3,"sources":["to_do.js","ls.js","utilities.js","main.js"],"names":["tasks","document","querySelector","toDoForm","toDoList","finishedList","unfinishedList","submitTask","event","preventDefault","taskName","getElementById","value","toDo","id","Date","now","content","completed","push","dispatchEvent","CustomEvent","displayTasks","arrayName","listItems","map","join","innerHTML","deleteItem","filter","completedTasks","taskRef","find","filterFinished","toDoSingle","filterNotFinished","saveToLs","localStorage","setItem","JSON","stringify","getTasks","lsTasks","parse","getItem","length","WebFont","load","google","families","bottomButtons","addEventListener","parseInt","target","matches","console","log"],"mappings":"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","file":"main.1f19ae8e.js","sourceRoot":"..","sourcesContent":["// Variables\nexport const tasks = document.querySelector(`.todo_list`);\nexport const toDoForm = document.querySelector(`.toDo`);\nexport let toDoList = [];\nexport let finishedList = [];\nexport let unfinishedList = [];\n\n// Function to collect user input, save it to the to do list array and add it to the html\nfunction submitTask(event){\n    // Stop default submit\n    event.preventDefault();\n    \n    // Get task from user input\n    // Can write this using current target or getElementById\n    //const taskName = event.currentTarget.task.value;\n    const taskName = document.getElementById(`task`).value\n    \n    //Save task information about the task to toDo\n    const toDo = { \n        id : Date.now(), \n        content: taskName, \n        completed: false \n    };\n\n    //Push toDo into toDoList array\n    toDoList.push(toDo);\n\n    //Clear form\n    // Can write this using current target or getElementById\n    //event.currentTarget.task.value = ``;\n    document.getElementById(`task`).value = ``;\n\n    //Create a custom task sumbitted event \n    toDoForm.dispatchEvent(new CustomEvent(\"tasksSubmitted\"));\n} //End Submit task function\n\n\n// Function to display tasks \nfunction displayTasks(arrayName){\n    // loop through all items in the to do list array and make them into html list items\n    const listItems = arrayName.map(toDo => \n        `<li class = \"todo_item\">\n        <input type = \"checkbox\" ${toDo.completed && \"checked\"} value = \"${toDo.id}\" class = \"checkbox\">\n        <span class = \"todo_item_name\"> ${toDo.content} </span>\n        <button aria-label = \"Remove ${toDo.content}\" value = \"${toDo.id}\" ><i class=\"fas fa-trash\"></i></button> \n        </li>`).join(``);\n\n    // Add the list items to the html\n    tasks.innerHTML = listItems;\n\n} //End Display Function\n\n// removes tasks from the list\nfunction deleteItem(id){\n    //This filters the array into checked and not checked and delete the checked ones\n    toDoList = toDoList.filter(toDo => toDo.id !== id);\n\n    //Event that calls display tasks and save to local storage\n    toDoForm.dispatchEvent(new CustomEvent(\"tasksSubmitted\"));\n\n} //End Delete Item function\n\n// gathers and saves completed tasks\nfunction completedTasks(id){\n    // this looks through the to do list array \n    //and finds the todo with an id that matches the one that was clicked\n    const taskRef = toDoList.find(toDo => toDo.id == id);\n\n    //This changes completed from false to true when clicked\n    taskRef.completed = !taskRef.completed;\n\n    //Event that calls display tasks and save to local storage\n    toDoForm.dispatchEvent(new CustomEvent(\"tasksSubmitted\"));\n    \n}// end completed tasks\n\n//Function to split the to do list into a new array for completed items\nfunction filterFinished(){\n    finishedList = toDoList.filter(toDoSingle => toDoSingle.completed == true);\n}\n\n\n//Function to split the to do list into a new array for uncompleted items\nfunction filterNotFinished(){\n    unfinishedList = toDoList.filter(toDoSingle => toDoSingle.completed == false);\n\n}\n\n\nexport { submitTask,displayTasks, deleteItem, completedTasks, filterFinished, filterNotFinished};\n\n\n\n","import {toDoList, toDoForm} from './to_do.js'\n\n//I didn't know how to use local storage, \n//so I used information from Wes Bos' beginner \n//JavaScript class. There is a walkthrough in the \n//class that explains how to use it. \n//Here is the link: https://beginnerjavascript.com\n\n// Save user input to local storage\nfunction saveToLs(){\n    // Convert our array object to JSON so local storage can read it and save it\n    localStorage.setItem(\"toDoList\", JSON.stringify(toDoList));\n}\n\n//Get user input from local storage\nfunction getTasks(){\n    const lsTasks = JSON.parse(localStorage.getItem(\"toDoList\"));\n    if (lsTasks.length >= 1){\n        toDoList.push(...lsTasks);\n        toDoForm.dispatchEvent(new CustomEvent(\"tasksSubmitted\"));\n    }\n}\n\n\nexport { saveToLs, getTasks };\n//end ls file","//Utilities file\n\n// Webfonts\nWebFont.load({\n    google: {\n      families: ['Arvo', 'Open+Sans' , 'Merriweather' , 'Special+Elite']\n    }\n  });\n\n\n//end utilities\n","// Imports\nimport { toDoList, toDoForm, tasks, unfinishedList, finishedList, submitTask,displayTasks, deleteItem, completedTasks, filterFinished, filterNotFinished} from './to_do.js';\nimport { saveToLs, getTasks } from './ls.js';\nimport * as util from './utilities.js';\n\n//Variables\nconst bottomButtons = document.querySelector(`.bottomButtons`);\n\n//Event Listeners\n//I used information from Wes Bos' beginner JavaScript \n//course to learn how to create custom listening events. \n//Here is the link: https://beginnerjavascript.com\ntoDoForm.addEventListener(\"submit\", submitTask);\ntoDoForm.addEventListener(\"tasksSubmitted\", () => displayTasks(toDoList));\ntoDoForm.addEventListener(\"tasksSubmitted\", saveToLs);\n\n\n// This event listener is listening for a click anywhere in tasks.\n//here is the article where I found it:\n// https://gomakethings.com/checking-event-target-selectors-with-event-bubbling-in-vanilla-javascript/\n//Then it calls either the delete item function or the completed task function depending on what is clicked. \ntasks.addEventListener(\"click\", function(event){\n    const id = parseInt(event.target.value);\n    if(event.target.matches(\"button\")) {\n        deleteItem(id);\n    };\n\n    if(event.target.matches(\"input[type = 'checkbox']\")) {\n        completedTasks(id);\n\n    };\n});\n\n// This listens for any click in the bottom buttons div and then calls functions depending on what is clicked. \nbottomButtons.addEventListener(\"click\", function(event){\n    if(event.target.matches(\"#all\")) {\n        console.log(`button all`);\n        displayTasks(toDoList)\n    };\n    if(event.target.matches(\"#active\")) {\n        console.log(`button active`);\n        filterNotFinished()\n        displayTasks(unfinishedList)\n\n    };\n    if(event.target.matches(\"#completed\")) {\n        console.log(`button completed`);\n        filterFinished()\n        displayTasks(finishedList)\n    };\n});\n\n//This is calling the get tasks function that retrieves information from local storage\ngetTasks();"]}