{"version":3,"sources":["ToDos.js"],"names":["toDoForm","document","querySelector","tasks","bottomButtons","toDoList","finishedList","unfinishedList","submitTask","event","preventDefault","taskName","getElementById","value","console","log","toDo","id","Date","now","content","completed","push","length","dispatchEvent","CustomEvent","displayTasks","arrayName","listItems","map","join","innerHTML","saveToLs","localStorage","setItem","JSON","stringify","info","getTasks","lsTasks","parse","getItem","deleteItem","filter","completedTasks","taskRef","find","addEventListener","parseInt","target","matches","filterNotFinished","filterFinished","toDoSingle"],"mappings":"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","file":"ToDos.2e49c42e.js","sourceRoot":"..","sourcesContent":["// Variables\nconst toDoForm = document.querySelector(`.toDo`);\nconst tasks = document.querySelector(`.todo_list`);\nconst bottomButtons = document.querySelector(`.bottomButtons`);\nlet toDoList = [];\nlet finishedList = [];\nlet unfinishedList = [];\n//const toDo = {};\n\n// Function to collect user input, save it to the to do list array and add it to the html\nfunction submitTask(event){\n    // Stop default submit\n    event.preventDefault();\n    \n    // Get task from user input\n    // Can write this using current target or getElementById\n    //const taskName = event.currentTarget.task.value;\n    const taskName = document.getElementById(`task`).value\n    console.log(taskName)\n\n    //Save task information about the task to toDo\n    const toDo = { \n        id : Date.now(), \n        content: taskName, \n        completed: false \n    };\n\n    //Push toDo into toDoList array\n    toDoList.push(toDo);\n    console.log(`There are ${toDoList.length} in my array`);\n\n    //Clear form\n    // Can write this using current target or getElementById\n    //event.currentTarget.task.value = ``;\n    document.getElementById(`task`).value = ``;\n\n    //Create a custom task sumbitted event \n    toDoForm.dispatchEvent(new CustomEvent(\"tasksSubmitted\"));\n} //End Submit task function\n\n\n// Function to display tasks \nfunction displayTasks(arrayName){\n    // loop through all items in the to do list array and make them into html list items\n    const listItems = arrayName.map(toDo => \n        `<li class = \"todo_item\">\n        <input type = \"checkbox\" ${toDo.completed && \"checked\"} value = \"${toDo.id}\">\n        <span class = \"todo_item_name\"> ${toDo.content} </span>\n        <button aria-label = \"Remove ${toDo.content}\" value = \"${toDo.id}\" >&times;</button> \n        </li>`).join(``);\n\n    // Add the list items to the html\n    tasks.innerHTML = listItems;\n\n} //End Display Function\n\n\n\n//Stuff for the local storage file\n\n//I didn't know how to use local storage, \n//so I used information from Wes Bos' beginner \n//JavaScript class. There is a walkthrough in the \n//class that explains how to use it. \n//Here is the link: https://beginnerjavascript.com\n\n// Save user input to local storage\nfunction saveToLs(){\n    // Convert our array object to JSON so local storage can read it and save it\n    localStorage.setItem(\"toDoList\", JSON.stringify(toDoList));\n    console.info(`Saving items to localstorage`);\n}\n\n//Get user input from local storage\nfunction getTasks(){\n    console.info(`restoring from localstorage`);\n    const lsTasks = JSON.parse(localStorage.getItem(\"toDoList\"));\n    if (lsTasks.length >= 0){\n        toDoList.push(...lsTasks);\n        toDoForm.dispatchEvent(new CustomEvent(\"tasksSubmitted\"));\n    }\n}\n//end ls file\n\n\n//Utilities file\n// removes tasks from the list\nfunction deleteItem(id){\n    //This filters the array into checked and not checked and delete the checked ones\n    toDoList = toDoList.filter(toDo => toDo.id !== id);\n    console.log(toDoList,\"deleted item\")\n\n    //Event that calls display tasks and save to local storage\n    toDoForm.dispatchEvent(new CustomEvent(\"tasksSubmitted\"));\n\n} //End Delete Item function\n\n// gathers and saves completed tasks\nfunction completedTasks(id){\n    // this looks through the to do list array \n    //and finds the todo with an id that matches the one that was clicked\n    const taskRef = toDoList.find(toDo => toDo.id == id);\n\n    //This changes completed from false to true when clicked\n    taskRef.completed = !taskRef.completed;\n    console.log(`It works`,taskRef)\n\n    //Event that calls display tasks and save to local storage\n    toDoForm.dispatchEvent(new CustomEvent(\"tasksSubmitted\"));\n    \n}// end completed tasks\n//end utilities\nconsole.log(`It works global`,toDoList);\n\n//Stuff for the main.js file\n\n//Event Listeners\n\n//I used information from Wes Bos' beginner JavaScript \n//course to learn how to create custom listening events. \n//Here is the link: https://beginnerjavascript.com\ntoDoForm.addEventListener(\"submit\", submitTask);\ntoDoForm.addEventListener(\"tasksSubmitted\", () => displayTasks(toDoList));\ntoDoForm.addEventListener(\"tasksSubmitted\", saveToLs);\n\n\n// This event listener is listening for a click anywhere in tasks.\n//here is the article where I found it:\n// https://gomakethings.com/checking-event-target-selectors-with-event-bubbling-in-vanilla-javascript/\n//Then it calls either the delete item function or the completed task function depending on what is clicked. \ntasks.addEventListener(\"click\", function(event){\n    const id = parseInt(event.target.value);\n    if(event.target.matches(\"button\")) {\n        deleteItem(id);\n    };\n\n    if(event.target.matches(\"input[type = 'checkbox']\")) {\n        completedTasks(id);\n\n    };\n});\n\n// This listens for any click in the bottom buttons div and then calls functions depending on what is clicked. \nbottomButtons.addEventListener(\"click\", function(event){\n    if(event.target.matches(\"#all\")) {\n        console.log(`button all`);\n        displayTasks(toDoList)\n    };\n    if(event.target.matches(\"#active\")) {\n        console.log(`button active`);\n        filterNotFinished()\n        displayTasks(unfinishedList)\n\n    };\n    if(event.target.matches(\"#completed\")) {\n        console.log(`button completed`);\n        filterFinished()\n        displayTasks(finishedList)\n    };\n});\n\n//This is calling the get tasks function that retrieves information from local storage\ngetTasks(); \n\n//Function to split the to do list into a new array for completed items\nfunction filterFinished(){\n    finishedList = toDoList.filter(toDoSingle => toDoSingle.completed == true);\n    console.log(\"Filter works\", finishedList)\n\n}\n\n\n//Function to split the to do list into a new array for uncompleted items\nfunction filterNotFinished(){\n    unfinishedList = toDoList.filter(toDoSingle => toDoSingle.completed == false);\n    console.log(\"Filter2 works\", unfinishedList)\n\n\n}\n\n"]}